@page "/expenses"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Madeni.Shared;
@using Madeni.Shared.Dtos
@using System.Globalization
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<PageTitle>My Expenses</PageTitle>

<h1>My Expenses</h1>

<p>This is a list of all your expenses.</p>

@if (ExpenseDtos == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Date</th>
                <th>Amount</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ExpenseDto in ExpenseDtos)
            {
                <tr>
                    <td>@ExpenseDto.Name</td>
                    <td>@ExpenseDto.Date.ToString("dd/MM/yyyy")</td>
                    <td>@ExpenseDto.Amount.ToString("C", CultureInfo.CreateSpecificCulture("en-KE"))</td>
                    <td>
                        <button class="button btn-sm btn-outline-danger" @onclick="() => DeleteExpense(ExpenseDto)">delete</button>
                    </td>
                </tr>
            }
        </tbody>
        <tfoot>
            Total : @ExpenseDtos.Sum(i => i.Amount).ToString("C", CultureInfo.CreateSpecificCulture("en-KE"))
        </tfoot>
    </table>
}

@code {
    private List<ExpenseDto>? ExpenseDtos = new List<ExpenseDto>();
    string userId = string.Empty;
    protected override async Task OnInitializedAsync()
    {

        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            userId = user.Claims.Where(x => x.Type == "sub").Select(x => x.Value).FirstOrDefault();
            ExpenseDtos = await LoadExpenses(userId);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task DeleteExpense(ExpenseDto item)
    {
        await Http.DeleteAsync("/api/expenses/" + item.Id, new CancellationToken());
        ExpenseDtos = await LoadExpenses(userId);
    }

    private async Task<List<ExpenseDto>?> LoadExpenses(string userId)
    {
        return await Http.GetFromJsonAsync<List<ExpenseDto>>("/api/expenses?userId=" + userId);
    }
}
