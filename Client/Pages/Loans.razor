@page "/loans"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Madeni.Shared;
@using Madeni.Shared.Dtos
@using System.Globalization
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<PageTitle>My Loans</PageTitle>

<h1>My Loans</h1>

<p>This is a list of all your loans.</p>

@if (LoanDtos == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Amount</th>               
                <th>Start Date</th>
                <th>Due Date</th>
                <th>
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var loanDto in LoanDtos)
            {
                <tr>
                    <td>@loanDto.Name</td>
                    <td>@loanDto.Amount.ToString("C", CultureInfo.CreateSpecificCulture("en-KE"))</td>                    
                    <td>@loanDto.StartDate.Date.ToString("dd/MM/yyyy")</td>
                    <td>@loanDto.ProspectiveDate.Date.ToString("dd/MM/yyyy")</td>
                    <td>
                        <a href="viewLoan/@loanDto.Id" class="card-link">View</a>
                    </td>
                </tr>
            }
        </tbody>
        <tfoot>
            Total : @LoanDtos.Sum(e=>e.Amount).ToString("C", CultureInfo.CreateSpecificCulture("en-KE")) 
        </tfoot>
    </table>
}

@code {
    private LoanDto[]? LoanDtos;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var userId = user.Claims.Where(x => x.Type == "sub").Select(x => x.Value).FirstOrDefault();
            LoanDtos = await Http.GetFromJsonAsync<LoanDto[]>("/api/Loans?userId=" + userId);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}
