@page "/"
@using Madeni.Shared.Dtos
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Globalization
@inject HttpClient Http
@attribute [Authorize]
@inject AuthenticationStateProvider AuthenticationStateProvider
@using ChartJs.Blazor.PieChart
@using ChartJs.Blazor.BarChart
@using System.Drawing
@using Madeni.Client.Shared
<PageTitle>Home</PageTitle>

<h4>Overview</h4>

@if (DashboardDto == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        @foreach (var widget in @DashboardDto.DashboardWidgets.OrderBy(w => w.DisplayOrder))
        {
            <div class="card col-md-2 border-success">
                <div class="card-title">
                    <h5 class="card-title"></h5>
                </div>
                <div class="card-body">
                    <p class="card-text">@widget.Total.ToString("C", CultureInfo.CreateSpecificCulture("en-KE"))</p>
                    <h6 class="card-subtitle mb-2 text-muted">Balance: @widget.Balance.ToString("C", CultureInfo.CreateSpecificCulture("en-KE"))</h6>
                    <small>@widget.Title</small>

                </div>
                <div class="card-footer">
     
                @switch (@widget.WidgetType)
                {
                    case Madeni.Shared.WidgetType.Loans:

                        <a href="addloan" class="btn-outline-dark btn-sm">
                            <span class="oi oi-plus text-success" title="add" aria-hidden="true"></span>
                        </a>
                        <a href="loans" class="btn-outline-dark btn-sm">
                            <span class="oi oi-list text-success" title="view" aria-hidden="true"></span>
                        </a>
                        break;
                    case Madeni.Shared.WidgetType.Expenses:

                        <a href="addexpense" class="btn-outline-dark btn-sm">
                            <span class="oi oi-plus text-success" title="add" aria-hidden="true"></span>
                        </a>
                        <a href="expenses" class="btn-outline-dark btn-sm">
                            <span class="oi oi-list text-success" title="view" aria-hidden="true"></span>
                        </a>
                        break;
                    case Madeni.Shared.WidgetType.Incomes:

                        <a href="addincome" class="btn-outline-dark btn-sm">
                            <span class="oi oi-plus text-success" title="add" aria-hidden="true"></span>
                        </a>
                        <a href="incomes" class="btn-outline-dark btn-sm">
                            <span class="oi oi-list text-success" title="view" aria-hidden="true"></span>
                        </a>
                        break;
                    case Madeni.Shared.WidgetType.Repayments:
                        <a href="repayments" class="btn-outline-dark btn-sm">
                            <span class="oi oi-list text-success" title="view" aria-hidden="true"></span>
                        </a>
                        break;
                    default:                        
                        break;
                }
                           </div>

            </div>
        }
        <div class="card col-md-4 border-info">
            <Chart Config="_config"></Chart>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <Chart Config="_configBar" Height="90" @ref="_chart"></Chart>
        </div>
    </div>
}
@code {
    private PieConfig _config;
    private DashboardDto? DashboardDto = null;
    private const int InitalCount = 12;

    private BarConfig _configBar;
    private Chart _chart;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var userId = user.Claims.Where(x => x.Type == "sub").Select(x => x.Value).FirstOrDefault();
            DashboardDto = await Http.GetFromJsonAsync<DashboardDto>("/api/Dashboard?userId=" + userId);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        initBarChart();
        InitPieChart();
    }

    private void InitPieChart()
    {
        _config = new PieConfig
            {
                Options = new PieOptions
                {
                    Responsive = true,
                    Title = new OptionsTitle
                    {
                        Display = true,
                        Text = "",
                    },
                    Legend = new Legend
                    {
                        Display = false
                    }
                }
            };

        foreach (string color in DashboardDto.DashboardWidgets.Select(w => w.Title))
        {
            _config.Data.Labels.Add(color);
        }

        PieDataset<decimal> dataset = new PieDataset<decimal>(@DashboardDto.DashboardWidgets.Select(w => w.Total).ToArray())
            {
                BackgroundColor = new[]
                                                                        {
                ColorUtil.ColorHexString(255, 99, 132), // Slice 1 aka "Red"
                ColorUtil.ColorHexString(255, 205, 86), // Slice 2 aka "Yellow"
                ColorUtil.ColorHexString(75, 192, 192), // Slice 3 aka "Green"
                ColorUtil.ColorHexString(54, 162, 235), // Slice 4 aka "Blue"
            }
            };

        _config.Data.Datasets.Add(dataset);
    }

    private void initBarChart()
    {
        _configBar = new BarConfig
            {
                Options = new BarOptions
                {
                    Responsive = true,
                    Title = new OptionsTitle
                    {
                        Display = true,
                        Text = "Breakdown"
                    },
                    Tooltips = new Tooltips
                    {
                        Mode = InteractionMode.Index,
                        Intersect = false
                    },
                    Scales = new BarScales
                    {
                        XAxes = new List<CartesianAxis>
                    {
                        new ChartJs.Blazor.BarChart.Axes.BarCategoryAxis
                        {
                            Stacked = false
                        }
                    },
                        YAxes = new List<CartesianAxis>
                    {
                        new ChartJs.Blazor.BarChart.Axes.BarLinearCartesianAxis
                        {
                            Stacked = false
                        }
                    }
                    }
                }
            };

        IDataset<int> dataset1 = new BarDataset<int>(new List<int> { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 })
            {
                Label = "Income",
                BackgroundColor = ColorUtil.FromDrawingColor(Madeni.Client.Shared.SampleUtils.ChartColors.Green)
            };

        IDataset<int> dataset2 = new BarDataset<int>(Madeni.Client.Shared.SampleUtils.RandomScalingFactor(InitalCount))
            {
                Label = "Expenses",
                BackgroundColor = ColorUtil.FromDrawingColor(Madeni.Client.Shared.SampleUtils.ChartColors.Yellow)
            };

        IDataset<int> dataset3 = new BarDataset<int>(Madeni.Client.Shared.SampleUtils.RandomScalingFactor(InitalCount))
            {
                Label = "Loans",
                BackgroundColor = ColorUtil.FromDrawingColor(Madeni.Client.Shared.SampleUtils.ChartColors.Red)
            };

        IDataset<int> dataset4 = new BarDataset<int>(Madeni.Client.Shared.SampleUtils.RandomScalingFactor(InitalCount))
            {
                Label = "Repayments",
                BackgroundColor = ColorUtil.FromDrawingColor(Madeni.Client.Shared.SampleUtils.ChartColors.Blue)
            };

        _configBar.Data.Labels.AddRange(Madeni.Client.Shared.SampleUtils.Months.Take(InitalCount));
        _configBar.Data.Datasets.Add(dataset1);
        _configBar.Data.Datasets.Add(dataset2);
        _configBar.Data.Datasets.Add(dataset3);
        _configBar.Data.Datasets.Add(dataset4);
    }
}